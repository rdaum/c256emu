.p816

.include "macros.a65"

TEXT_SEGMENT = 2
DATA_SEGMENT = 3
BSS_SEGMENT = 4
ZP_SEGMENT = 5

RELOC_WORD = $80
RELOC_HIGH = $40
RELOC_LOW = $20
RELOC_SEGADDR = $c0
RELOC_SEG = $a0

O65_BAD_HEADER_MAGIC = $01
O65_UNKNOWN_RELOC_SEGMENT = $02
O65_UNKNOWN_RELOC_TYPE = $03

.import __ZEROPAGE_LOAD__    ; symbol defining the start of the ZP

.zeropage
.org $00
  status:            .res 1  ; 0 if ok, otherwise some error code
  program:           .res 4  ; ptr to bottom of program bank @ start
  seg_base:          .res 4

  ; relocations working area
  offset_byte:       .res 1  ; tmp storage for the offset byte
  offset:            .res 4
  type:              .res 1
  segment:           .res 1
  cur_segment_base:  .res 4  ; the current segment base for reloc
  new_segment_base:  .res 4  ; desired segment base
  working_addr:      .res 4  ; where to stash relocated addresses
  working_byte:      .res 1  ;
  reloc_start:       .res 4
  R0:                .res 4  ; tmp 32-bit vals for swapping around
  R1:                .res 4

  ; read from the header
  mode:              .res 2
  tbase:             .res 4
  tlen:              .res 4
  dbase:             .res 4
  dlen:              .res 4
  bbase:             .res 4
  blen:              .res 4
  zbase:             .res 4
  zlen:              .res 4
  stack:             .res 4

  ; header options working area
  olen:              .res 1
  otype:             .res 1

  ; ext references working area

  num_references:    .res 4


.reloc
.code
start:
  ; set zero page to where the linker tells us it should be
	acc16i16
	lda #__ZEROPAGE_LOAD__
	tcd

  ; stash the address of the program
  Store32 #$30000, program

  ; begin relocation
  jsr load_program

  ; then jump to it by pushing address to stack and rtl
  acc8i16
  lda seg_base+2
  pha
  acc16i16
  lda seg_base
  dec
  pha
  rtl

; util functions

; TODO this could probably be rewritten
get_32_from_offset:
.scope
	clc
	lda	#$ffff
	adc	seg_base
	sta	R0
	lda	#$ffff
	adc	seg_base+2
	sta	R0+2
	clc
	lda	R0
	adc	offset
	sta	R1
	lda	R0+2
	adc	offset+2
	sta	R1+2
	lda	[R1]
	sta	working_addr
  clc
  inc R1
  inc R1
  lda [R1]
	sta	working_addr+2
  rts
.endscope

; Read current value @ program, put in A.
; corrupts Y
; Then increment program to next position
prg_next_byte:
.scope
  acc8i8
	lda	[program]
  tax
  acc16i16
	sec
	inc	program
	bne	no_carry
	inc	program+2
no_carry:
  txa
	and	#$00ff
done:
  clc
	rts
.endscope

prg_next_word:
.scope
  sec
  acc16i16
	lda	[program]
  tax
	clc
	lda	#$2
	adc	program
	sta	program
	bcc	no_carry
	inc	program+2
no_carry:
	txa
done:
  clc
  rts
.endscope

load_header:
.scope
  ; First two bytes must be $01 $00 for non-c64
  jsr prg_next_word
  cmp #$0001
  bne fail_bad_magic

  ; Next 4 bytes should be 'o65\0' ($65 $36 $35 $00)
  jsr prg_next_word
  cmp #$366f
  bne fail_bad_magic
  jsr prg_next_word
  cmp #$0035
  beq good_magic

fail_bad_magic:
  acc8i16
  lda #O65_BAD_HEADER_MAGIC
  sta status
  acc16i16
  jmp done_load_header

good_magic:
  jsr prg_next_word
  sta mode

  and #$2000
  cmp #$2000
  bne read_16_sizes

  PrgNext32To tbase
  PrgNext32To tlen
  PrgNext32To dbase
  PrgNext32To dlen
  PrgNext32To bbase
  PrgNext32To blen
  PrgNext32To zbase
  PrgNext32To zlen
  PrgNext32To stack
  bra done_load_header

read_16_sizes:
  PrgNext16To tbase
  PrgNext16To tlen
  PrgNext16To dbase
  PrgNext16To dlen
  PrgNext16To bbase
  PrgNext16To blen
  PrgNext16To zbase
  PrgNext16To zlen
  PrgNext16To stack

done_load_header:
  rts
.endscope

load_header_options:
.scope
;  while ((olen = *(program++))) {
start_loop:
  clc
  PrgNext8To olen
  cmp #0
	bne start_header_option
  bra done_load_header_options
start_header_option:
  PrgNext8To otype      ; get type from program stream
  acc8i16
  dec olen              
read_header_option:
  acc8i16
  dec olen              ; count down olen bytes and eat the option string
  lda olen
  cmp #0
  bne eat_header_bytes
  bra start_loop
eat_header_bytes:
  jsr prg_next_byte
  bra read_header_option
done_load_header_options:
  acc16i16
	rts
.endscope

load_external_references:
.scope
  clc
  lda mode
  and #$2000
  cmp #$2000
  bne read_num_refs_16
  stz num_references
  stz num_references+2
read_num_refs_32:
  PrgNext32To num_references
  bra eat_references_loop
read_num_refs_16:
  PrgNext16To num_references
eat_references_loop:
  lda num_references
  cmp #0
  beq done_load_external_references
  inc num_references
  jsr prg_next_byte
  cmp #0
  beq eat_references_loop
done_load_external_references:
  rts
.endscope

do_reloc:
.scope
  acc16i8
  ldx type
  acc16i16

  stz reloc_start
  stz reloc_start+2
  
	clc
  lda offset
  dec
	clc
  adc seg_base
  sta reloc_start
  bcc no_carry_offset
  inc reloc_start+2
no_carry_offset:
  lda offset+2
  adc seg_base+2
  adc reloc_start+2
  sta reloc_start+2

  ; clear the address that's there
  stz working_addr
  stz working_addr+2
reloc_word:
  cpx #RELOC_WORD
  bne reloc_seg
	lda	[reloc_start]
	sta	working_addr
	stz	working_addr+2
;    Add the bank of the current segment base in.
	clc
	lda	working_addr+2
	adc	cur_segment_base+2
	sta	working_addr+2

  AdjustAddr  
	stz	working_addr+2
	lda	working_addr
	sta	[reloc_start]

  brl done_do_reloc
reloc_seg:
  cpx #RELOC_SEG
  bne reloc_segaddr
  lda	[reloc_start]       ; get a whole word, easier that way
  and #$00ff              ; clear upper byte
  sta working_addr+2      ; shift lower byte into the bank byte
  jsr prg_next_word       ; stick parameter argments...
  sta working_addr        ; into lower word 
  AdjustAddr
  acc8i16
  lda working_addr+2      ; get just the bank
  sta [reloc_start]       ; and stick the modified bank back
  acc16i16
  brl done_do_reloc
reloc_segaddr:
  cpx #RELOC_SEGADDR
  bne reloc_low
  jsr get_32_from_offset  ; get 32 bits of the segment address
  acc8i16
  stz working_addr+3      ; throw away the highest byte
  acc16i16
  AdjustAddr              ; adjust it
  lda working_addr
  sta	[reloc_start]       ; store the lower 16
  ldy #2
  lda working_addr+2
  acc8i16
  sta [reloc_start],y
  acc16i16
  brl done_do_reloc
reloc_low:
  cpx #RELOC_LOW
  bne reloc_high
	lda	[reloc_start]
	and	#$00ff
	sta	R0
	stz	R0+2
	clc
	lda	R0
	adc	new_segment_base
	sta	working_addr
	lda	R0+2
	adc	new_segment_base+2
	sta	working_addr+2
	lda	working_addr
	and	#$ff
	sta	working_addr
	stz	working_addr+2
  acc8i16
	lda	working_addr
	sta	[reloc_start]
  acc16i16
  bra done_do_reloc
reloc_high:
  cpx #RELOC_HIGH
  bne unknown_reloc_type
  acc8i16
	lda	[reloc_start]
  sta working_addr+1
  acc16i16
  jsr prg_next_byte
  acc8i16
  sta working_addr
  acc16i16
  Add32 working_addr, cur_segment_base, working_addr
  AdjustAddr
  lda working_addr
  and #$ff00
  xba
  acc8i16	
	sta	[reloc_start]
  acc16i16
  bra done_do_reloc
unknown_reloc_type:
  acc8i16
  lda #O65_UNKNOWN_RELOC_TYPE
  sta status
  acc16i16
done_do_reloc:
  rts
.endscope

perform_relocations:
.scope
  stz offset
  stz offset+2
continue_relocations:
  clc
  jsr prg_next_byte
  cmp #0
  acc8i16
  sta offset_byte
  acc16i16
  bne check_continue_offset
  jmp done_perform_relocations
check_continue_offset:
  cmp #$ff            ; if 0xff add to the ongoing offset and go again
  bne accumulate_offset
  lda #$fe
  clc
  adc offset
  sta offset
  bcs do_carry_fe_offset
  bra do_continue_fe_offset
do_carry_fe_offset:
  inc offset+2
do_continue_fe_offset:
  bra continue_relocations

accumulate_offset:
  acc8i16
  lda offset_byte
  acc16i16
  clc
  adc offset
  sta offset
  bcs do_carry_accum_offset
  bra get_type_and_segment
do_carry_accum_offset:  
  inc offset+2
get_type_and_segment:
  jsr prg_next_byte
  acc8i16
  tax
  and #$f0
  sta type
  txa
  and #$0f
  sta segment
  acc16i16
start_text_seg_reloc:
  cmp #TEXT_SEGMENT
  bne start_data_seg_reloc
  ; do text seg reloc
  Store32 tbase, cur_segment_base
  Store32 seg_base, new_segment_base
  jsr do_reloc
  jmp continue_relocations
start_data_seg_reloc:
  cmp #DATA_SEGMENT
  bne start_zp_seg_reloc
  ; do data segment
  Store32 tbase, cur_segment_base
  clc
  Add32 seg_base, tlen, new_segment_base
  jsr do_reloc
  jmp continue_relocations
start_zp_seg_reloc:
  cmp #ZP_SEGMENT
  bne start_bss_seg_reloc
  ; do zp segment
  Store32 #$00000000, cur_segment_base
  Store32 zbase, new_segment_base
  jsr do_reloc
  jmp continue_relocations
start_bss_seg_reloc:
  cmp #BSS_SEGMENT
  bne unknown_segment_type
  ; do bss_reloc
  Store32 bbase, cur_segment_base
  Add32 seg_base, tlen, new_segment_base
  Add32 new_segment_base, dlen, new_segment_base
  jsr do_reloc
  jmp continue_relocations
unknown_segment_type:
  acc8i16
  lda #O65_UNKNOWN_RELOC_SEGMENT
  sta status
  acc16i16
done_perform_relocations:
  rts
.endscope

load_program:
.scope
  ; clear zero page vars
  acc8i16
  stz status
  stz olen
  stz otype

  acc16i16
  stz cur_segment_base
  stz cur_segment_base+2
  stz new_segment_base
  stz new_segment_base+2
  stz working_addr
  stz working_addr+2


step_load_header:
  jsr load_header         ; load the header
  acc8i16
  clc
  lda status
  cmp #0
  acc16i16
  beq step_load_header_options
  brl done_load_program
step_load_header_options:
  jsr load_header_options ; eat the header options
  acc8i16
  clc
  lda status
  cmp #0
  acc16i16
  beq store_seg_base
  brl done_load_program
store_seg_base:
  Store32 program, seg_base

step_jump_past_segments:
  ; jump offset by tlen+dlen
	clc
	lda	tlen
	adc	dlen
	sta	R0
	lda	tlen+2
	adc	dlen+2
	sta	R0+2
	clc
	lda	program
	adc	R0
	sta	program
	lda	program+2
	adc	R0+2
	sta	program+2

step_load_external_references:
  ; We've jumped to the start of the external references list
  ; eat that
  jsr load_external_references
  acc8i16
  clc
  lda status
  cmp #0
  acc16i16
  beq step_perform_text_relocations
  bra done_load_program
step_perform_text_relocations:
  jsr perform_relocations     ; perform text seg relocations
  acc8i16
  clc
  lda status
  cmp #0
  acc16i16
  beq step_perform_data_relocations
  bra done_load_program
step_perform_data_relocations:
  jsr perform_relocations
  acc8i16
  clc
  lda status
  cmp #0
  acc16i16
  beq step_perform_bss_clear
  bra done_load_program
step_perform_bss_clear:
  Add32 seg_base, tlen, new_segment_base
  Add32 new_segment_base, dlen, R0
  Add32 R0, blen, R1
zero_loop:  
  clc
  lda R0
  cmp R1
  bne keep_going
  lda R0+2
  cmp R1+2
  bne keep_going
  bra done_load_program
keep_going:
  acc8i16
  lda #00
  sta [R0]
  acc16i16
  clc
  inc R0
  bne zero_loop
  inc R0+2
  bne zero_loop
done_load_program:
  rts
.endscope